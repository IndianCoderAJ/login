{"ast":null,"code":"import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants } from '../_constants';\nimport { history } from '../_helpers';\n\nfunction register(user, history) {\n  return dispatch => {\n    dispatch(request(true));\n    userService.register(user).then(user => {\n      dispatch(success());\n      dispatch(alertActions.success('Registration successful'));\n      dispatch(request(false));\n      clearError(dispatch);\n      history.push('/login');\n    }).catch(error => {\n      dispatch(request(false));\n\n      if (error.message == 'Network Error') {\n        //networkError()\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      } // if()  \n      // console.log(error.message);\n\n\n      dispatch(failure(error.response.data.error));\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function request(status) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      status\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getEmailValid(email) {\n  return dispatch => {\n    userService.getEmailValid(email).then(emailTaken => {\n      dispatch(emailCheck(true));\n    }).catch(error => {\n      console.log(error);\n      dispatch(emailCheck(true));\n    });\n  };\n\n  function emailCheck(emailTaken) {\n    return {\n      type: userConstants.EMAIL_TAKEN,\n      emailTaken\n    };\n  }\n}\n\nexport const userActions = {\n  register,\n  getEmailValid\n};","map":{"version":3,"sources":["/home/akshay/Desktop/Reactjs/simple-login/src/_actions/user.actions.js"],"names":["userService","alertActions","clearError","userConstants","history","register","user","dispatch","request","then","success","push","catch","error","message","failure","response","data","status","type","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","getEmailValid","email","emailTaken","emailCheck","console","log","EMAIL_TAKEN","userActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,UAAT,EAAqBC,aAArB,QAA0C,eAA1C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAuBF,OAAvB,EAAgC;AAC5B,SAAOG,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAAC,IAAD,CAAR,CAAR;AAEAR,IAAAA,WAAW,CAACK,QAAZ,CAAqBC,IAArB,EACKG,IADL,CAESH,IAAD,IAAU;AACNC,MAAAA,QAAQ,CAACG,OAAO,EAAR,CAAR;AACAH,MAAAA,QAAQ,CAACN,YAAY,CAACS,OAAb,CAAqB,yBAArB,CAAD,CAAR;AACAH,MAAAA,QAAQ,CAACC,OAAO,CAAC,KAAD,CAAR,CAAR;AACAN,MAAAA,UAAU,CAACK,QAAD,CAAV;AACAH,MAAAA,OAAO,CAACO,IAAR,CAAa,QAAb;AACH,KART,EAUMC,KAVN,CAWWC,KAAD,IAAW;AACRN,MAAAA,QAAQ,CAACC,OAAO,CAAC,KAAD,CAAR,CAAR;;AACC,UAAGK,KAAK,CAACC,OAAN,IAAiB,eAApB,EAAoC;AAClC;AACAP,QAAAA,QAAQ,CAACQ,OAAO,CAAC,mDAAD,CAAR,CAAR;AACAR,QAAAA,QAAQ,CAACN,YAAY,CAACY,KAAb,CAAmB,mDAAnB,CAAD,CAAR;AACAX,QAAAA,UAAU,CAACK,QAAD,CAAV;AACD;AACA,OARM,CAUT;AACA;;;AACAA,MAAAA,QAAQ,CAACQ,OAAO,CAACF,KAAK,CAACG,QAAN,CAAeC,IAAf,CAAoBJ,KAArB,CAAR,CAAR;AACAN,MAAAA,QAAQ,CAACN,YAAY,CAACY,KAAb,CAAmBA,KAAK,CAACG,QAAN,CAAeC,IAAf,CAAoBJ,KAAvC,CAAD,CAAR;AACAX,MAAAA,UAAU,CAACK,QAAD,CAAV;AACH,KA1BT;AA4BH,GA/BD;;AAiCA,WAASC,OAAT,CAAiBU,MAAjB,EAAyB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEhB,aAAa,CAACiB,gBAAtB;AAAuCF,MAAAA;AAAvC,KAAP;AAAyD;;AACpF,WAASR,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEa,MAAAA,IAAI,EAAEhB,aAAa,CAACkB,gBAAtB;AAAwCf,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASS,OAAT,CAAiBF,KAAjB,EAAwB;AAAE,WAAO;AAAEM,MAAAA,IAAI,EAAEhB,aAAa,CAACmB,gBAAtB;AAAwCT,MAAAA;AAAxC,KAAP;AAAwD;AACrF;;AAED,SAASU,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,SAAOjB,QAAQ,IAAI;AACfP,IAAAA,WAAW,CAACuB,aAAZ,CAA0BC,KAA1B,EACKf,IADL,CAESgB,UAAD,IAAgB;AACZlB,MAAAA,QAAQ,CAACmB,UAAU,CAAC,IAAD,CAAX,CAAR;AACH,KAJT,EAKMd,KALN,CAMWC,KAAD,IAAW;AACTc,MAAAA,OAAO,CAACC,GAAR,CAAYf,KAAZ;AACAN,MAAAA,QAAQ,CAACmB,UAAU,CAAC,IAAD,CAAX,CAAR;AACH,KATT;AAWH,GAZD;;AAcA,WAASA,UAAT,CAAoBD,UAApB,EAAgC;AAAE,WAAO;AAAEN,MAAAA,IAAI,EAAEhB,aAAa,CAAC0B,WAAtB;AAAmCJ,MAAAA;AAAnC,KAAP;AAAwD;AAC7F;;AAED,OAAO,MAAMK,WAAW,GAAG;AACvBzB,EAAAA,QADuB;AAEvBkB,EAAAA;AAFuB,CAApB","sourcesContent":["import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants } from '../_constants';\nimport { history } from '../_helpers';\n\n\nfunction register(user,history) {\n    return dispatch => {\n        dispatch(request(true));\n\n        userService.register(user)\n            .then(\n                (user) => { \n                    dispatch(success());\n                    dispatch(alertActions.success('Registration successful'));\n                    dispatch(request(false));\n                    clearError(dispatch);\n                    history.push('/login')\n                },\n              \n            ).catch(\n                  (error) => {\n                     dispatch(request(false));\n                      if(error.message == 'Network Error'){\n                        //networkError()\n                        dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                      }\n                    \n                    // if()  \n                    // console.log(error.message);\n                    dispatch(failure(error.response.data.error));\n                    dispatch(alertActions.error(error.response.data.error));\n                    clearError(dispatch);\n                });\n        \n    };\n\n    function request(status) { return { type: userConstants.REGISTER_REQUEST,status  } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getEmailValid(email){\n    return dispatch => {\n        userService.getEmailValid(email)\n            .then(\n                (emailTaken) => { \n                    dispatch(emailCheck(true))\n                }\n            ).catch(\n                  (error) => {\n                    console.log(error);\n                    dispatch(emailCheck(true))\n                });\n        \n    };\n\n    function emailCheck(emailTaken) { return { type: userConstants.EMAIL_TAKEN, emailTaken } }\n}\n\nexport const userActions = { \n    register,\n    getEmailValid\n}"]},"metadata":{},"sourceType":"module"}