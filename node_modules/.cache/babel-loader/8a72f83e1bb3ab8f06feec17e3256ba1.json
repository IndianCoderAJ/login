{"ast":null,"code":"import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants } from '../_constants';\n\nfunction register(user, history) {\n  return dispatch => {\n    dispatch(request(true));\n    userService.register(user).then(user => {\n      dispatch(success());\n      dispatch(alertActions.success('Registration successful'));\n      clearError(dispatch);\n      history.push('/login');\n    }).catch(error => {\n      if (error.message == 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(failure(error.response.data.error));\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function request(status) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      status\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getEmailValid(email) {\n  return dispatch => {\n    userService.getEmailValid(email).then(response => {\n      dispatch(emailCheck(response.data.emailTaken));\n    }).catch(error => {\n      if (error.message == 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(emailCheck(false));\n    });\n  };\n\n  function emailCheck(emailTaken) {\n    return {\n      type: userConstants.EMAIL_TAKEN,\n      emailTaken\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction login(data, history) {\n  return dispatch => {\n    userService.login(data).then(response => {\n      //set token to local storeage.\n      localStorage.setItem('user-auth', response.data.accessToken);\n      dispatch(setUser(response.data.data));\n      history.push('/');\n    }).catch(error => {\n      if (error.message == 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function setUser(data) {\n    return {\n      type: userConstants.SET_USERDATA,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction setCurrentUser(data) {\n  return {\n    type: userConstants.SET_CURRENTUSER,\n    data\n  };\n}\n\nfunction logout(history) {\n  return dispatch => {\n    // remove token...\n    dispatch(logoutDispatch());\n    localStorage.removeItem(\"user-auth\");\n    history.push('/login');\n  };\n\n  function logoutDispatch(data) {\n    return {\n      type: userConstants.LOGOUT_USER\n    };\n  }\n}\n\nfunction changePass(data, history) {\n  return dispatch => {\n    // dispatch();\n    userService.changePassword(data).then(response => {\n      dispatch(alertActions.success(response.data.message));\n      history.push('/');\n    }).catch(error => {\n      if (error.message == 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n    });\n  };\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nexport const userActions = {\n  register,\n  getEmailValid,\n  login,\n  setCurrentUser,\n  logout,\n  changePass\n};","map":{"version":3,"sources":["/home/akshay/Desktop/Reactjs/simple-login/src/_actions/user.actions.js"],"names":["userService","alertActions","clearError","userConstants","register","user","history","dispatch","request","then","success","push","catch","error","message","failure","response","data","status","type","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","getEmailValid","email","emailCheck","emailTaken","EMAIL_TAKEN","login","localStorage","setItem","accessToken","setUser","SET_USERDATA","setCurrentUser","SET_CURRENTUSER","logout","logoutDispatch","removeItem","LOGOUT_USER","changePass","changePassword","userActions"],"mappings":"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","sourcesContent":["import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants } from '../_constants';\n\n\n\nfunction register(user,history) {\n    return dispatch => {\n        dispatch(request(true));\n\n        userService.register(user)\n            .then(\n                (user) => { \n                    dispatch(success());\n                    dispatch(alertActions.success('Registration successful'));\n                    \n                    clearError(dispatch);\n                    history.push('/login')\n                },\n              \n            ).catch(\n                  (error) => {\n                    \n                    if(error.message == 'Network Error'){\n                        dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                    }\n    \n                    dispatch(failure(error.response.data.error));\n                    dispatch(alertActions.error(error.response.data.error));\n                    clearError(dispatch);\n                });\n        \n    };\n\n    function request(status) { return { type: userConstants.REGISTER_REQUEST,status  } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getEmailValid(email){\n    return dispatch => {\n        userService.getEmailValid(email)\n            .then(\n                (response) => { \n                    dispatch(emailCheck(response.data.emailTaken))\n                }\n            ).catch(\n                  (error) => {\n                    if(error.message == 'Network Error'){\n                        dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                    }\n                    dispatch(emailCheck(false))\n            });\n        \n    };\n\n    function emailCheck(emailTaken) { return { type: userConstants.EMAIL_TAKEN, emailTaken } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction login(data,history){\n    return dispatch => {\n        userService.login(data)\n        .then((response) => {\n        //set token to local storeage.\n        localStorage.setItem('user-auth',response.data.accessToken)\n        dispatch(setUser(response.data.data))\n        history.push('/')\n        }).catch((error) => {\n            if(error.message == 'Network Error'){\n                dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            dispatch(alertActions.error(error.response.data.error));\n            clearError(dispatch);\n        })\n    }\n    function setUser(data) { return { type: userConstants.SET_USERDATA,data} } \n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction setCurrentUser(data) {\n  return { type:userConstants.SET_CURRENTUSER,data}\n}\n\nfunction logout(history){\n return dispatch => {    \n    // remove token...\n     dispatch(logoutDispatch()) \n     localStorage.removeItem(\"user-auth\");\n     history.push('/login')\n    \n}\n  function logoutDispatch(data) { return { type: userConstants.LOGOUT_USER} } \n}\n\nfunction changePass(data,history){\n    return dispatch => {   \n        // dispatch();\n        userService.changePassword(data)\n         .then(response => {\n            dispatch(alertActions.success(response.data.message));\n            history.push('/')\n         }).catch((error)=>{\n            if(error.message == 'Network Error'){\n                dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n         })\n    }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nexport const userActions = { \n    register,\n    getEmailValid,\n    login,\n    setCurrentUser,\n    logout,\n    changePass\n}"]},"metadata":{},"sourceType":"module"}