{"ast":null,"code":"import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants, loaderConstant, forgotpassConstant } from '../_constants';\n\nfunction register(user, history) {\n  return dispatch => {\n    dispatch({\n      type: loaderConstant.LOADINGTRUE\n    });\n    userService.register(user).then(user => {\n      dispatch({\n        type: loaderConstant.LOADINGTRUE\n      });\n      dispatch(success());\n      dispatch(alertActions.success('Registration successful'));\n      clearError(dispatch);\n      history.push('/login');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGTRUE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n}\n\nfunction getEmailValid(email) {\n  return dispatch => {\n    userService.getEmailValid(email).then(response => {\n      dispatch(emailCheck(response.data.emailTaken));\n    }).catch(error => {\n      if (error.message === 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(emailCheck(false));\n    });\n  };\n\n  function emailCheck(emailTaken) {\n    return {\n      type: userConstants.EMAIL_TAKEN,\n      emailTaken\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction login(data, history) {\n  return dispatch => {\n    dispatch({\n      type: loaderConstant.LOADINGTRUE\n    });\n    userService.login(data).then(response => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      }); //set token to local storeage.\n\n      localStorage.setItem('user-auth', response.data.accessToken);\n      dispatch(setUser(response.data.data));\n      history.push('/');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function setUser(data) {\n    return {\n      type: userConstants.SET_USERDATA,\n      data\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout(history) {\n  return dispatch => {\n    // remove token...\n    dispatch(logoutDispatch());\n    localStorage.removeItem(\"user-auth\");\n    history.push('/login');\n  };\n\n  function logoutDispatch(data) {\n    return {\n      type: userConstants.LOGOUT_USER\n    };\n  }\n}\n\nfunction changePass(data, history) {\n  return dispatch => {\n    dispatch({\n      type: loaderConstant.LOADINGTRUE\n    });\n    userService.changePassword(data).then(response => {\n      dispatch(alertActions.success(response.data.message));\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n      clearError(dispatch);\n      history.push('/');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getOTP(data, history) {\n  return dispatch => {\n    dispatch({\n      type: loaderConstant.LOADINGTRUE\n    });\n    userService.getOPT(data).then(response => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n      dispatch(alertActions.success(response.data.message));\n      console.log(data);\n      dispatch({\n        type: forgotpassConstant.STEP_ONE,\n        data\n      });\n      clearError(dispatch);\n      history.push('/optVerification');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n}\n\nfunction otpVerification(data, history) {\n  return dispatch => {\n    userService.otpVerification(data).then(response => {\n      let token = response.data.token;\n      dispatch({\n        type: forgotpassConstant.STEP_TWO,\n        token\n      });\n      history.push('/newpassword');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n}\n\nfunction resetPassword(data, history) {\n  return dispatch => {\n    dispatch({\n      type: loaderConstant.LOADINGTRUE\n    });\n    userService.resetPassword(data).then(() => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n      dispatch({\n        type: forgotpassConstant.CLEAR\n      });\n      dispatch(alertActions.success('Password Reset successful.'));\n      clearError(dispatch);\n      history.push('/');\n    }).catch(error => {\n      dispatch({\n        type: loaderConstant.LOADINGFALSE\n      });\n\n      if (error.message === 'Network Error') {\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      }\n\n      console.log(error.response.status);\n      dispatch(alertActions.error(error.response.error));\n      clearError(dispatch);\n    });\n  };\n}\n\nfunction setCurrentUser(data) {\n  return {\n    type: userConstants.SET_CURRENTUSER,\n    data\n  };\n}\n\nexport const userActions = {\n  register,\n  getEmailValid,\n  login,\n  setCurrentUser,\n  logout,\n  changePass,\n  getOTP,\n  otpVerification,\n  resetPassword\n};","map":{"version":3,"sources":["/home/akshay/Desktop/Reactjs/simple-login/src/_actions/user.actions.js"],"names":["userService","alertActions","clearError","userConstants","loaderConstant","forgotpassConstant","register","user","history","dispatch","type","LOADINGTRUE","then","success","push","catch","error","message","response","data","REGISTER_SUCCESS","getEmailValid","email","emailCheck","emailTaken","failure","EMAIL_TAKEN","REGISTER_FAILURE","login","LOADINGFALSE","localStorage","setItem","accessToken","setUser","SET_USERDATA","logout","logoutDispatch","removeItem","LOGOUT_USER","changePass","changePassword","getOTP","getOPT","console","log","STEP_ONE","otpVerification","token","STEP_TWO","resetPassword","CLEAR","status","setCurrentUser","SET_CURRENTUSER","userActions"],"mappings":"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","sourcesContent":["import { userService } from '../_services';\nimport { alertActions } from './';\nimport { clearError, userConstants,loaderConstant, forgotpassConstant } from '../_constants';\n\n\n\nfunction register(user,history) {\n    return dispatch => {\n        dispatch({type:loaderConstant.LOADINGTRUE}) \n        userService.register(user)\n            .then(\n                (user) => { \n                    dispatch({type:loaderConstant.LOADINGTRUE}) \n                    dispatch(success());\n                    dispatch(alertActions.success('Registration successful'));\n                    clearError(dispatch);\n                    history.push('/login')\n                },\n              \n            ).catch(\n                  (error) => {\n                    dispatch({type:loaderConstant.LOADINGTRUE}) \n                    if(error.message === 'Network Error'){\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                    }\n    \n                    dispatch(alertActions.error(error.response.data.error));\n                    clearError(dispatch);\n                });\n        \n    }; \n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n}\n\nfunction getEmailValid(email){\n    return dispatch => {\n        userService.getEmailValid(email)\n            .then(\n                (response) => { \n                    dispatch(emailCheck(response.data.emailTaken))\n                }\n            ).catch(\n                  (error) => {\n                    if(error.message === 'Network Error'){\n                        dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                    }\n                    dispatch(emailCheck(false))\n            });\n        \n    };\n\n    function emailCheck(emailTaken) { return { type: userConstants.EMAIL_TAKEN, emailTaken } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction login(data,history){\n    return dispatch => {\n        dispatch({type:loaderConstant.LOADINGTRUE}) \n        userService.login(data)\n        .then((response) => {\n        dispatch({type:loaderConstant.LOADINGFALSE}) \n        //set token to local storeage.\n        localStorage.setItem('user-auth',response.data.accessToken)\n        dispatch(setUser(response.data.data))\n        history.push('/')\n        }).catch((error) => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            if(error.message === 'Network Error'){\n                dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            dispatch(alertActions.error(error.response.data.error));\n            clearError(dispatch);\n        })\n    }\n    function setUser(data) { return { type: userConstants.SET_USERDATA,data} } \n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction logout(history){\n return dispatch => {    \n    // remove token...\n     dispatch(logoutDispatch()) \n     localStorage.removeItem(\"user-auth\");\n     history.push('/login')\n    \n}\n  function logoutDispatch(data) { return { type: userConstants.LOGOUT_USER} } \n}\n\nfunction changePass(data,history){\n    return dispatch => {   \n        dispatch({type:loaderConstant.LOADINGTRUE}) \n        userService.changePassword(data)\n         .then(response => {\n            dispatch(alertActions.success(response.data.message));\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            clearError(dispatch);\n            history.push('/')\n         }).catch((error)=>{\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            if(error.message === 'Network Error'){\n                dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            dispatch(alertActions.error(error.response.data.error));\n            clearError(dispatch);\n         })\n    }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getOTP (data,history) {\n    return dispatch => { \n        dispatch({type:loaderConstant.LOADINGTRUE}) \n        userService.getOPT(data)\n        .then(response => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            dispatch(alertActions.success(response.data.message));\n            console.log(data);\n            dispatch({type:forgotpassConstant.STEP_ONE,data})\n            clearError(dispatch);\n            history.push('/optVerification')\n        }).catch(error => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            if(error.message === 'Network Error'){\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            dispatch(alertActions.error(error.response.data.error));\n            clearError(dispatch);\n        })\n    }\n}\n\nfunction otpVerification (data,history) {\n    return dispatch => {\n        userService.otpVerification(data)\n        .then(response => {\n            let token = response.data.token\n          dispatch({type:forgotpassConstant.STEP_TWO,token})\n            history.push('/newpassword')\n        }).catch(error => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            if(error.message === 'Network Error'){\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            dispatch(alertActions.error(error.response.data.error));\n            clearError(dispatch);\n        })\n    }\n}\n\nfunction resetPassword (data,history){\n    return dispatch => {\n        dispatch({type:loaderConstant.LOADINGTRUE}) \n        userService.resetPassword(data)\n         .then(() => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            dispatch({type:forgotpassConstant.CLEAR})\n            dispatch(alertActions.success('Password Reset successful.'));\n            clearError(dispatch);\n            history.push('/')\n         }).catch(error => {\n            dispatch({type:loaderConstant.LOADINGFALSE}) \n            if(error.message === 'Network Error'){\n                dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                clearError(dispatch);\n               return ;\n            }\n            console.log(error.response.status);\n            dispatch(alertActions.error(error.response.error));\n            clearError(dispatch); \n         })\n    }\n}\n\nfunction setCurrentUser(data) {\n    return { type:userConstants.SET_CURRENTUSER,data}\n  }\nexport const userActions = { \n    register,\n    getEmailValid,\n    login,\n    setCurrentUser,\n    logout,\n    changePass,\n    getOTP,\n    otpVerification,\n    resetPassword\n}"]},"metadata":{},"sourceType":"module"}