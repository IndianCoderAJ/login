{"ast":null,"code":"import { userService } from '../_services';\nimport { alertActions } from './';\nimport { userConstants } from '../_constants';\nimport { history } from '../_helpers';\n\nfunction register(user, history) {\n  return dispatch => {\n    dispatch(request(user));\n    userService.register(true).then(user => {\n      dispatch(success());\n      dispatch(alertActions.success('Registration successful'));\n      setTimeout(() => {\n        dispatch(alertActions.clear());\n      }, 5000);\n      history.push('/login');\n    }).catch(error => {\n      dispatch(request(false));\n\n      if (error.message == 'Network Error') {\n        //networkError()\n        dispatch(failure(\"Somthing went wrong please try again in sometime.\"));\n        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n        clearError(dispatch);\n        return;\n      } // if()  \n      // console.log(error.message);\n\n\n      dispatch(failure(error.response.data.error));\n      dispatch(alertActions.error(error.response.data.error));\n      clearError(dispatch);\n    });\n  };\n\n  function request(status) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      status\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction getEmailValid(email) {\n  return dispatch => {\n    userService.getEmailValid(email).then(emailTaken => {\n      dispatch(emailCheck(true));\n    }).catch(error => {\n      console.log(error);\n      dispatch(emailCheck(true));\n    });\n  };\n\n  function emailCheck(emailTaken) {\n    return {\n      type: userConstants.EMAIL_TAKEN,\n      emailTaken\n    };\n  }\n}\n\nexport const userActions = {\n  register,\n  getEmailValid\n};","map":{"version":3,"sources":["/home/akshay/Desktop/Reactjs/simple-login/src/_actions/user.actions.js"],"names":["userService","alertActions","userConstants","history","register","user","dispatch","request","then","success","setTimeout","clear","push","catch","error","message","failure","clearError","response","data","status","type","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","getEmailValid","email","emailTaken","emailCheck","console","log","EMAIL_TAKEN","userActions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,cAA5B;AACA,SAASC,YAAT,QAA6B,IAA7B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAGA,SAASC,QAAT,CAAkBC,IAAlB,EAAuBF,OAAvB,EAAgC;AAC5B,SAAOG,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAACF,IAAD,CAAR,CAAR;AAEAL,IAAAA,WAAW,CAACI,QAAZ,CAAqB,IAArB,EACKI,IADL,CAESH,IAAD,IAAU;AACNC,MAAAA,QAAQ,CAACG,OAAO,EAAR,CAAR;AACAH,MAAAA,QAAQ,CAACL,YAAY,CAACQ,OAAb,CAAqB,yBAArB,CAAD,CAAR;AACAC,MAAAA,UAAU,CAAC,MAAM;AACbJ,QAAAA,QAAQ,CAACL,YAAY,CAACU,KAAb,EAAD,CAAR;AACH,OAFS,EAEP,IAFO,CAAV;AAGAR,MAAAA,OAAO,CAACS,IAAR,CAAa,QAAb;AACH,KATT,EAWMC,KAXN,CAYWC,KAAD,IAAW;AACRR,MAAAA,QAAQ,CAACC,OAAO,CAAC,KAAD,CAAR,CAAR;;AACC,UAAGO,KAAK,CAACC,OAAN,IAAiB,eAApB,EAAoC;AAClC;AACAT,QAAAA,QAAQ,CAACU,OAAO,CAAC,mDAAD,CAAR,CAAR;AACAV,QAAAA,QAAQ,CAACL,YAAY,CAACa,KAAb,CAAmB,mDAAnB,CAAD,CAAR;AACAG,QAAAA,UAAU,CAACX,QAAD,CAAV;AACD;AACA,OARM,CAUT;AACA;;;AACAA,MAAAA,QAAQ,CAACU,OAAO,CAACF,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoBL,KAArB,CAAR,CAAR;AACAR,MAAAA,QAAQ,CAACL,YAAY,CAACa,KAAb,CAAmBA,KAAK,CAACI,QAAN,CAAeC,IAAf,CAAoBL,KAAvC,CAAD,CAAR;AACAG,MAAAA,UAAU,CAACX,QAAD,CAAV;AAEH,KA5BT;AA8BH,GAjCD;;AAmCA,WAASC,OAAT,CAAiBa,MAAjB,EAAyB;AAAE,WAAO;AAAEC,MAAAA,IAAI,EAAEnB,aAAa,CAACoB,gBAAtB;AAAuCF,MAAAA;AAAvC,KAAP;AAAyD;;AACpF,WAASX,OAAT,CAAiBJ,IAAjB,EAAuB;AAAE,WAAO;AAAEgB,MAAAA,IAAI,EAAEnB,aAAa,CAACqB,gBAAtB;AAAwClB,MAAAA;AAAxC,KAAP;AAAuD;;AAChF,WAASW,OAAT,CAAiBF,KAAjB,EAAwB;AAAE,WAAO;AAAEO,MAAAA,IAAI,EAAEnB,aAAa,CAACsB,gBAAtB;AAAwCV,MAAAA;AAAxC,KAAP;AAAwD;AACrF;;AAED,SAASW,aAAT,CAAuBC,KAAvB,EAA6B;AACzB,SAAOpB,QAAQ,IAAI;AACfN,IAAAA,WAAW,CAACyB,aAAZ,CAA0BC,KAA1B,EACKlB,IADL,CAESmB,UAAD,IAAgB;AACZrB,MAAAA,QAAQ,CAACsB,UAAU,CAAC,IAAD,CAAX,CAAR;AACH,KAJT,EAKMf,KALN,CAMWC,KAAD,IAAW;AACTe,MAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAZ;AACAR,MAAAA,QAAQ,CAACsB,UAAU,CAAC,IAAD,CAAX,CAAR;AACH,KATT;AAWH,GAZD;;AAcA,WAASA,UAAT,CAAoBD,UAApB,EAAgC;AAAE,WAAO;AAAEN,MAAAA,IAAI,EAAEnB,aAAa,CAAC6B,WAAtB;AAAmCJ,MAAAA;AAAnC,KAAP;AAAwD;AAC7F;;AAED,OAAO,MAAMK,WAAW,GAAG;AACvB5B,EAAAA,QADuB;AAEvBqB,EAAAA;AAFuB,CAApB","sourcesContent":["import { userService } from '../_services';\nimport { alertActions } from './';\nimport { userConstants } from '../_constants';\nimport { history } from '../_helpers';\n\n\nfunction register(user,history) {\n    return dispatch => {\n        dispatch(request(user));\n\n        userService.register(true)\n            .then(\n                (user) => { \n                    dispatch(success());\n                    dispatch(alertActions.success('Registration successful'));\n                    setTimeout(() => {\n                        dispatch(alertActions.clear()); \n                    }, 5000);\n                    history.push('/login')\n                },\n              \n            ).catch(\n                  (error) => {\n                     dispatch(request(false));\n                      if(error.message == 'Network Error'){\n                        //networkError()\n                        dispatch(failure(\"Somthing went wrong please try again in sometime.\"))\n                        dispatch(alertActions.error('Somthing went wrong please try again in sometime.'));\n                        clearError(dispatch);\n                       return ;\n                      }\n                    \n                    // if()  \n                    // console.log(error.message);\n                    dispatch(failure(error.response.data.error));\n                    dispatch(alertActions.error(error.response.data.error));\n                    clearError(dispatch);\n                   \n                });\n        \n    };\n\n    function request(status) { return { type: userConstants.REGISTER_REQUEST,status  } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction getEmailValid(email){\n    return dispatch => {\n        userService.getEmailValid(email)\n            .then(\n                (emailTaken) => { \n                    dispatch(emailCheck(true))\n                }\n            ).catch(\n                  (error) => {\n                    console.log(error);\n                    dispatch(emailCheck(true))\n                });\n        \n    };\n\n    function emailCheck(emailTaken) { return { type: userConstants.EMAIL_TAKEN, emailTaken } }\n}\n\nexport const userActions = { \n    register,\n    getEmailValid\n}"]},"metadata":{},"sourceType":"module"}